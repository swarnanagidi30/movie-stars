{"version":3,"sources":["components/CharacterSelect/CharacterSelect.jsx","components/MoviesList/MoviesList.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["CharacterSelect","onChange","React","useState","open","setOpen","options","setOptions","loading","length","useEffect","active","a","fetch","response","json","peoples","results","Autocomplete","event","newValue","onOpen","onClose","getOptionSelected","option","value","name","getOptionLabel","renderInput","params","TextField","label","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","useStyles","makeStyles","theme","root","width","maxWidth","minHeight","marginLeft","title","textAlign","allfilms","getFilmId","film","replace","MoviesList","films","onLatestMovie","classes","filmDetails","setFilmDetails","Promise","all","map","id","resolve","then","resp","filmDetail","url","getFilmDetail","f","setTimeout","Grid","container","spacing","className","List","dense","aria-label","flim","index","ListItem","key","ListItemText","inset","primary","appItem","marginTop","textBox","App","dateString","character","setCharacter","latestMovie","setLatestMovie","release_date","Date","getFullYear","Boolean","window","location","hostname","match","createMuiTheme","palette","type","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01653b2a.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport fetch from 'node-fetch';\n\nexport default function CharacterSelect({ onChange }) {\n    const [open, setOpen] = React.useState(false);\n    const [options, setOptions] = React.useState([]);\n    const loading = open && options.length === 0;\n\n    React.useEffect(() => {\n        let active = true;\n\n        if (!loading) {\n            return undefined;\n        }\n\n        (async () => {\n            const response = await fetch('https://swapi.dev/api/people/');\n            const peoples = await response.json();\n            if (active) {\n                setOptions(peoples.results);\n            }\n        })();\n\n        return () => {\n            active = false;\n        };\n    }, [loading]);\n\n    React.useEffect(() => {\n        if (!open) {\n            setOptions([]);\n        }\n    }, [open]);\n\n    return (\n        <Autocomplete\n            open={open}\n            onChange={(event, newValue) => {\n                if (onChange) {\n                    onChange(newValue);\n                }\n                // setValue(newValue)\n            }}\n            onOpen={() => {\n                setOpen(true);\n            }}\n            onClose={() => {\n                setOpen(false);\n            }}\n            getOptionSelected={(option, value) => option.name === value.name}\n            getOptionLabel={(option) => option ? option.name : ''}\n            options={options}\n            loading={loading}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Character\"\n                    variant=\"outlined\"\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                />\n            )}\n        />\n    );\n}","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport fetch from 'node-fetch';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: 360,\n        minHeight: '30vh',\n        marginLeft: 5\n        // backgroundColor: theme.palette.background.paper,\n    },\n    title: {\n        width: '100%',\n        textAlign: 'left'\n    }\n}));\n\nconst allfilms = {};\n\nconst getFilmId = (film) => {\n    if (!film) {\n        return -1;\n    }\n    return film.replace('http://swapi.dev/api/films/', '').replace('/', '');\n}\n\nexport const getFilmDetail = (films) => {\n    return Promise.all(films.map((film) => {\n        const id = getFilmId(film);\n        return allfilms[id] ? Promise.resolve(allfilms[id]) : fetch(film).then(async (resp) => {\n            const filmDetail = await resp.json();\n            allfilms[getFilmId(filmDetail.url)] = filmDetail;\n            return filmDetail;\n        });\n    }))\n};\n\n\nexport default function MoviesList({ films, onLatestMovie }) {\n    const classes = useStyles();\n    const [filmDetails, setFilmDetails] = React.useState([]);\n    React.useEffect(() => {\n        if (films && films.length > 0) {\n            getFilmDetail(films).then(f => {\n                setFilmDetails(f);\n            });\n        }\n    }, [films]);\n\n    if (films && filmDetails.length === 0) {\n        return <CircularProgress color=\"inherit\" size={20} />;\n    }\n    if (onLatestMovie && filmDetails.length > 0) {\n        setTimeout(() => onLatestMovie(filmDetails[filmDetails.length - 1]), 1000)\n    }\n    return (\n        <Grid container spacing={2} className={classes.root}>\n            <p className={classes.title}>\n                List of Movies:\n          </p>\n            <List dense aria-label=\"contacts\">\n                {filmDetails && filmDetails.map((flim, index) => (\n                    <ListItem key={index}>\n                        <ListItemText inset primary={flim.title} />\n                    </ListItem>\n                ))}\n            </List>\n        </Grid>\n    )\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.scss';\nimport CountrySelect from './components/CharacterSelect';\nimport TextField from '@material-ui/core/TextField';\nimport MoviesList from './components/MoviesList';\n\n\nconst useStyles = makeStyles((theme) => ({\n  appItem: {\n    marginTop: theme.spacing(3),\n    width: '25%'\n  },\n  textBox: {\n    width: '100%'\n  }\n}));\n\nfunction App() {\n\n  const classes = useStyles();\n  const [character, setCharacter] = React.useState({});\n  const [latestMovie, setLatestMovie] = React.useState(null);\n\n  const handleChange = (value) => {\n    setCharacter(value);\n  };\n  const handleLatestMovie = (value) => {\n    setLatestMovie(value);\n  }\n\n  const getYear = (dateString) => {\n    const date = new Date(dateString);\n    return date.getFullYear();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className={classes.appItem}>\n          <CountrySelect onChange={handleChange} />\n        </div>\n        <div className={classes.appItem}>\n          <MoviesList films={character && character.films} onLatestMovie={handleLatestMovie} />\n        </div>\n        <div className={classes.appItem}>\n          <TextField className={classes.textBox} label=\"Name / Year last Movie:\" value={latestMovie ? (latestMovie.title + ' - ' + getYear(latestMovie.release_date)) : ''} />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}